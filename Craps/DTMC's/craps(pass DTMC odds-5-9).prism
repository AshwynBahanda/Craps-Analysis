mdp

const int min_buyin=5;
const int buyin; //SUBJECT TO CHANGE
const balance; //SUBJECT TO CHANGE
const odds; //SUBJECT TO CHANGE
const maximum_money= balance + (steps*buyin) + (round(3/2*(odds*steps)));
const int steps;

module CRAPS

    x: [0..1] init 0;
    total: [0..maximum_money] init balance;
    d: [0..12];
    k: [0..steps+1] init 0;
	// State 0 - User can bet if their total is greater than the buy in, if 7 or 11 lands they win, 2,3,12 lose, anything else, moves to come out.
    [bet] x=0 & (total>=min_buyin) & (total>=buyin) -> 0.16666:(x'=0) & (total'=min(maximum_money,win)) & (k' = update) 
                                    + 0.05556:(x'=0) & (total'=min(maximum_money,win)) & (k' = update)
                                    + 0.02778:(x'=0) & (total'=max(0,loss)) & (k' = update)
                                    + 0.05556:(x'=0) & (total'=max(0,loss)) & (k' = update)
                                    + 0.02778:(x'=0) & (total'=max(0,loss)) & (k' = update)
                                    + 0.08333:(x'=1) & (d'=4)  
                                    + 0.11111:(x'=1) & (d'=5)
                                    + 0.13889:(x'=1) & (d'=6) 
                                    + 0.13889:(x'=1) & (d'=8) 
                                    + 0.11111:(x'=1) & (d'=9) 
                                    + 0.08333:(x'=1) & (d'=10);

    [bet] x=0 & (total>=min_buyin) & (total <buyin) -> 0.16666:(x'=0) & (total'=min(maximum_money,total+total)) & (k' = update) 
                                    + 0.05556:(x'=0) & (total'=min(maximum_money,total+total)) & (k' = update)
                                    + 0.02778:(x'=0) & (total'=max(0,total-total)) & (k' = update)
                                    + 0.05556:(x'=0) & (total'=max(0,total-total)) & (k' = update)
                                    + 0.02778:(x'=0) & (total'=max(0,total-total)) & (k' = update)
                                    + 0.08333:(x'=1) & (d'=4)  
                                    + 0.11111:(x'=1) & (d'=5)
                                    + 0.13889:(x'=1) & (d'=6) 
                                    + 0.13889:(x'=1) & (d'=8) 
                                    + 0.11111:(x'=1) & (d'=9) 
                                    + 0.08333:(x'=1) & (d'=10);
//Ends game automatically if user has no money left for minimum buy in

  
	
//Anything else, state 3 is revisisted until the comeout value or 7 lands. Comeout value is a win, 7 is a loss.
//When player has enough to buy in at constant betting value and put odds on
    [come_out_roll] x=1 & d=4 & (total>=buyin) -> 0.08333:(x'=0)  & (total'=min(maximum_money,win)) & (d'=0) & (k' = update) + 0.16666:(x'=0) & (total'=max(0,loss)) & (d'=0) & (k' = update) + 0.02778:(x'=1) + 0.05556:(x'=1) + 0.11111:(x'=1) + 0.13889:(x'=1) + 0.13889:(x'=1)  + 0.11111:(x'=1)  + 0.08333:(x'=1)  + 0.05556:(x'=1)  + 0.02778:(x'=1);
    [come_out_roll_take] x=1 & d=5 & (total>=buyin+odds) -> 0.11111:(x'=0)  & (total'=min(maximum_money,winodds)) & (d'=0) & (k' = update) + 0.16666:(x'=0) & (total'=max(0,lossodds)) & (d'=0) & (k' = update) + 0.02778:(x'=1) + 0.05556:(x'=1) + 0.08333:(x'=1) + 0.13889:(x'=1) + 0.13889:(x'=1)  + 0.11111:(x'=1)  + 0.08333:(x'=1)  + 0.05556:(x'=1)  + 0.02778:(x'=1);
    [come_out_roll] x=1 & d=6 & (total>=buyin)-> 0.13889:(x'=0)  & (total'=min(maximum_money,win)) & (d'=0) & (k' = update) + 0.16666:(x'=0) & (total'=max(0,loss)) & (d'=0) & (k' = update) + 0.02778:(x'=1) + 0.05556:(x'=1) + 0.08333:(x'=1) + 0.11111:(x'=1) + 0.13889:(x'=1)  + 0.11111:(x'=1)  + 0.08333:(x'=1)  + 0.05556:(x'=1)  + 0.02778:(x'=1);
    [come_out_roll] x=1 & d=8 & (total>=buyin)-> 0.13889:(x'=0)  & (total'=min(maximum_money,win)) & (d'=0) & (k' = update) + 0.16666:(x'=0) & (total'=max(0,loss)) & (d'=0) & (k' = update) + 0.02778:(x'=1) + 0.05556:(x'=1) + 0.08333:(x'=1) + 0.11111:(x'=1) + 0.13889:(x'=1)  + 0.11111:(x'=1)  + 0.08333:(x'=1)  + 0.05556:(x'=1)  + 0.02778:(x'=1);
    [come_out_roll_take] x=1 & d=9 & (total>=buyin+odds)-> 0.11111:(x'=0)  & (total'=min(maximum_money,winodds)) & (d'=0) & (k' = update) + 0.16666:(x'=0) & (total'=max(0,lossodds)) & (d'=0) & (k' = update) + 0.02778:(x'=1) + 0.05556:(x'=1) + 0.08333:(x'=1) + 0.11111:(x'=1) + 0.13889:(x'=1)  + 0.13889:(x'=1)  + 0.08333:(x'=1)  + 0.05556:(x'=1)  + 0.02778:(x'=1);
    [come_out_roll] x=1 & d=10 & (total>=buyin)->0.08333:(x'=0)  & (total' = min(maximum_money,win)) & (d'=0) & (k' = update) + 0.16666:(x'=0) & (total'=max(0,loss)) & (d'=0)  & (k' = update) + 0.02778:(x'=1) + 0.05556:(x'=1) + 0.08333:(x'=1) + 0.11111:(x'=1) + 0.13889:(x'=1)  + 0.13889:(x'=1)  + 0.11111:(x'=1) + 0.05556:(x'=1)  + 0.02778:(x'=1);

//When player has enough to buy in at constant betting value but not enough to put in odds
    [come_out_roll] x=1 & d=5 & (total<buyin+odds) & (total>=buyin) -> 0.11111:(x'=0)  & (total'=min(maximum_money,win)) & (d'=0) & (k' = update) + 0.16666:(x'=0) & (total'=max(0,loss)) & (d'=0) & (k' = update) + 0.02778:(x'=1) + 0.05556:(x'=1) + 0.08333:(x'=1) + 0.13889:(x'=1) + 0.13889:(x'=1)  + 0.11111:(x'=1)  + 0.08333:(x'=1)  + 0.05556:(x'=1)  + 0.02778:(x'=1);
    [come_out_roll] x=1 & d=9 & (total<buyin+odds) & (total>=buyin)-> 0.11111:(x'=0)  & (total'=min(maximum_money,win)) & (d'=0) & (k' = update) + 0.16666:(x'=0) & (total'=max(0,loss)) & (d'=0) & (k' = update) + 0.02778:(x'=1) + 0.05556:(x'=1) + 0.08333:(x'=1) + 0.11111:(x'=1) + 0.13889:(x'=1)  + 0.13889:(x'=1)  + 0.08333:(x'=1)  + 0.05556:(x'=1)  + 0.02778:(x'=1);

//When player does not have enough to buy in at constant betting value and also does not have enough for odds.
    [come_out_roll] x=1 & d=4 & (total<buyin) -> 0.08333:(x'=0)  & (total'=min(maximum_money,total+total)) & (d'=0) & (k' = update) + 0.16666:(x'=0) & (total'=max(0,total-total)) & (d'=0) & (k' = update) + 0.02778:(x'=1) + 0.05556:(x'=1) + 0.11111:(x'=1) + 0.13889:(x'=1) + 0.13889:(x'=1)  + 0.11111:(x'=1)  + 0.08333:(x'=1)  + 0.05556:(x'=1)  + 0.02778:(x'=1);
    [come_out_roll] x=1 & d=5 & (total<buyin+odds) & (total<buyin)-> 0.11111:(x'=0)  & (total'=min(maximum_money,total+total)) & (d'=0) & (k' = update) + 0.16666:(x'=0) & (total'=max(0,total-total)) & (d'=0) & (k' = update) + 0.02778:(x'=1) + 0.05556:(x'=1) + 0.08333:(x'=1) + 0.13889:(x'=1) + 0.13889:(x'=1)  + 0.11111:(x'=1)  + 0.08333:(x'=1)  + 0.05556:(x'=1)  + 0.02778:(x'=1);
    [come_out_roll] x=1 & d=6 & (total<buyin)-> 0.13889:(x'=0)  & (total'=min(maximum_money,total+total)) & (d'=0) & (k' = update) + 0.16666:(x'=0) & (total'=max(0,total-total)) & (d'=0) & (k' = update) + 0.02778:(x'=1) + 0.05556:(x'=1) + 0.08333:(x'=1) + 0.11111:(x'=1) + 0.13889:(x'=1)  + 0.11111:(x'=1)  + 0.08333:(x'=1)  + 0.05556:(x'=1)  + 0.02778:(x'=1);
    [come_out_roll] x=1 & d=8 & (total<buyin)-> 0.13889:(x'=0)  & (total'=min(maximum_money,total+total)) & (d'=0) & (k' = update) + 0.16666:(x'=0) & (total'=max(0,total-total)) & (d'=0) & (k' = update) + 0.02778:(x'=1) + 0.05556:(x'=1) + 0.08333:(x'=1) + 0.11111:(x'=1) + 0.13889:(x'=1)  + 0.11111:(x'=1)  + 0.08333:(x'=1)  + 0.05556:(x'=1)  + 0.02778:(x'=1);
    [come_out_roll] x=1 & d=9 & (total<buyin+odds) & (total<buyin)-> 0.11111:(x'=0)  & (total'=min(maximum_money,total+total)) & (d'=0) & (k' = update) + 0.16666:(x'=0) & (total'=max(0,total-total)) & (d'=0) & (k' = update) + 0.02778:(x'=1) + 0.05556:(x'=1) + 0.08333:(x'=1) + 0.11111:(x'=1) + 0.13889:(x'=1)  + 0.13889:(x'=1)  + 0.08333:(x'=1)  + 0.05556:(x'=1)  + 0.02778:(x'=1);
    [come_out_roll] x=1 & d=10 & (total<buyin) ->0.08333:(x'=0)  & (total' = min(maximum_money,total+total)) & (d'=0) & (k' = update) + 0.16666:(x'=0) & (total'=max(0,total-total)) & (d'=0)  & (k' = update) + 0.02778:(x'=1) + 0.05556:(x'=1) + 0.08333:(x'=1) + 0.11111:(x'=1) + 0.13889:(x'=1)  + 0.13889:(x'=1)  + 0.11111:(x'=1) + 0.05556:(x'=1)  + 0.02778:(x'=1);
    
endmodule

formula winodds=(total+buyin+(round(3/2*odds)));
formula win = (total+buyin);
formula lossodds=(total-buyin-odds);
formula loss=(total-buyin);
formula update = min(k+1,steps+1);

rewards "state_rewards"
	 x=0 & k=steps : total;
endrewards